name: Python Checks

on:
  push:
    branches: [main, stage, dev]
  pull_request:
    branches: [main, stage, dev]

jobs:
  lint-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # 프로젝트에 맞는 Python 버전으로 변경
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -e .
        
    - name: Install pre-commit
      run: |
        pip install pre-commit
        
    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-
          
    - name: Install pre-commit hooks
      run: |
        pre-commit install
        
    - name: Run Ruff linter
      run: |
        pip install ruff==0.11.5
        cd backend
        ruff check --fix .
        
    - name: Run Ruff formatter
      run: |
        cd backend
        ruff format .
        
    - name: Check for changes after formatting
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code formatting changes detected. Please run 'ruff format' locally and commit the changes."
          git diff
          exit 1
        fi

  pytest:
    runs-on: ubuntu-latest
    needs: lint-check

    env:
      PYTHON_ENV: test  # 테스트 환경 변수 설정
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test_db
      POSTGRES_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
      MONGODB_HOST: localhost
      MONGODB_PORT: 27017
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      MONGODB_URL: mongodb://root:example@localhost:27017/
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_URL: redis://localhost:6379/0
      ME_ADMIN: admin
      ME_ADMIN_PASS: adminpass
      OPENAI_API_KEY: dummy-key
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # 프로젝트에 맞는 Python 버전으로 변경
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Set up environment for tests
      run: |
        pip install --upgrade pip
        pip install -e backend[dev]
        
    - name: Run pytest with coverage
      run: |
        cd backend
        PYTHON_ENV=test pytest -s -m "not connection" -c pytest.ini \
        --cov=. \
        --cov-report=xml:coverage.xml

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: backend/coverage.xml
        flags: unittests
        name: codecov-report
        verbose: true
